AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys EKS nodes into an existing VPC (qs-1p7nknoid)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
          - NodeAMIOS
          - NodeInstanceProfile
          - NodeInstanceRoleName
          - NodeInstanceRoleArn
          - BootstrapArguments
          - HttpProxy
          - CustomAmiId
      - Label:
          default: EKS configuration
        Parameters:
          - EKSControlPlane
          - NodeInstanceType
          - NumberOfNodes
          - MaxNumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
          - ManagedNodeGroup
          - ManagedNodeGroupAMIType
          - ProvisionClusterAutoScaler
          - ControlPlaneSecurityGroup
          - KubernetesVersion
          - TargetGroupARNs
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
          - CleanupSecurityGroupDependenciesLambdaArn
          - KubeManifestLambdaArn
          - NodeSGFunctionArn
    ParameterLabels:
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      KeyPairName:
        default: SSH key name
      NodeAMIOS:
        default: Node AMI operating system
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      VPCID:
        default: VPC ID
      EKSControlPlane:
        default: EKS cluster name
      NodeInstanceType:
        default: Nodes instance type
      NumberOfNodes:
        default: Number of nodes
      MaxNumberOfNodes:
        default: Maximum number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSize:
        default: Node volume size
      ManagedNodeGroup:
        default: Managed Node Group
      ManagedNodeGroupAMIType:
        default: Managed Node Group AMI type
      ProvisionClusterAutoScaler:
        default: Cluster autoscaler
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      CleanupSecurityGroupDependenciesLambdaArn:
        default: Cleanup Security Group dependencies Lambda ARN
      BootstrapArguments:
        default: Bootstrap arguments
      ControlPlaneSecurityGroup:
        default: Control plane Security Group
      NodeInstanceProfile:
        default: Node instance profile
      NodeInstanceRoleName:
        default: Node instance role name
      NodeInstanceRoleArn:
        default: Node instance role ARN
      KubernetesVersion:
        default: Kubernetes version
      CustomAmiId:
        default: Custom AMI id
      HttpProxy:
        default: HTTP proxy
      KubeManifestLambdaArn:
        default: Kubernetes manifest Lambda ARN
      TargetGroupARNs:
        default: Target Group ARN's
      NodeSGFunctionArn:
        default: Node security group Lambda ARN
  AWSAMIRegionMap:
    Filters:
      AMZNEKS116:
        name: 'amazon-eks-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS116GPU:
        name: 'amazon-eks-gpu-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS115:
        name: 'amazon-eks-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS114:
        name: 'amazon-eks-node-1.14-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS115GPU:
        name: 'amazon-eks-gpu-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS114GPU:
        name: 'amazon-eks-gpu-node-1.14-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS113:
        name: 'amazon-eks-node-1.13-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS113GPU:
        name: 'amazon-eks-gpu-node-1.13-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      SLES15EKS115:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS115GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS114:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS114GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS113:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS113GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
  cfn-lint: { config: { ignore_checks: [W2030] } }
  LintSpellExclude:
    - Managed Node Group
    - files/bootstrap.sh
    - https://github.com/awslabs/amazon-eks-ami
    - autoscaler
    - Lambda
    - Security Group
    - Target Group
    - Kubernetes
    - Instance Profile
    - Role
    - Enabled
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  NodeAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the node
      instances.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the workload (e.g.,
      subnet-a0246123)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the workload (e.g.,
      subnet-b1f432cd)
    Type: String
    Default: ""
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the workload (e.g.,
      subnet-b1f4a2cd)
    Type: String
    Default: ""
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  CleanupSecurityGroupDependenciesLambdaArn:
    Description: ARN for CleanupSecurityGroupDependencies lambda function
    Type: String
    Default: ""
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the node instances
    Type: String
  NumberOfNodes:
    Default: 3
    Description: Number of EKS node instances
    Type: Number
  MaxNumberOfNodes:
    Default: ""
    Description: "[OPTIONAL] The maximum number of Amazon EKS node instances, if left blank will be set to the same value as NumberOfNodes"
    Type: String
  NodeGroupName:
    Default: Default
    Description: Name for EKS node group
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: Size for node volumes
    Type: String
  ManagedNodeGroup:
    AllowedValues: [ "yes", "no" ]
    Default: "no"
    Description: Choose if you want to use a managed node group. If you select "yes", you must select Kubernetes version 1.14 or higher.
    Type: String
  ManagedNodeGroupAMIType:
    Description: Select one of the two AMI types for your Managed Node Group (only applies if you selected Managed Node Group "yes". ).
      GPU instance types should use the AL2_x86_64_GPU AMI type, which uses the Amazon EKS-optimized Linux AMI with GPU support.
      Non-GPU instances should use the AL2_x86_64 AMI type, which uses the Amazon EKS-optimized Linux AMI.
    AllowedValues: [ "AL2_x86_64", " AL2_x86_64_GPU"]
    Default: "AL2_x86_64"
    Type: String
  MangedNodeGroupLabel:
    Description: Add a custom name label to the Managed Node Group Nodes. If you dont do this then a default one will be added for you.
    Type: String
    Default: ''
  EKSControlPlane:
    Description: Name of the EKS cluster to join
    Type: String
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami.
    Type: String
    Default: ""
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: EKS control plane EC2 Security Group
  NodeInstanceProfile:
    Type: String
    Description: ARN for IAM Instance Profile to attach to nodes
  NodeInstanceRoleName:
    Type: String
    Description: IAM Role name to attach to nodes
  NodeInstanceRoleArn:
    Type: String
    Description: IAM Role ARN to attach to nodes
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.16", "1.15", "1.14", "1.13" ]
    Default: "1.16"
    Description: The Kubernetes control plane version.
  TargetGroupARNs:
    Type: CommaDelimitedList
    Default: ""
    Description: "[OPTIONAL] List of Target Group ARN's to use with Managed Node Groups"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  CustomAmiId:
    Type: String
    Default: ""
    Description: "[OPTIONAL] If an AMI id is specified here it will be used in stead of the ami determined from the OS/region."
  HttpProxy:
    Type: String
    Default: ""
    Description: "[OPTIONAL] Specify the host name for an HTTP proxy to use for outbound internet access."
  KubeManifestLambdaArn:
    Type: String
    Default: ""
    Description: "ARN for lambda function used by the KubeManifest custom resource."
  NodeSGFunctionArn:
    Type: String
    Description: Function ARN to fetch node Security Group for managed node groups
  ProvisionClusterAutoScaler:
    Type: String
    AllowedValues: [ Enabled, Disabled ]
    Default: Disabled
    Description: Choose Enabled to enable Kubernetes cluster autoscaler.
Conditions:
  EnableProxy: !Not [!Equals [!Ref HttpProxy, ""]]
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  MaxNodes: !Not [ !Equals [ !Ref MaxNumberOfNodes, "" ] ]
  AmznOS: !Equals
    - !Ref NodeAMIOS
    - Amazon-Linux-HVM
  SuseOS: !Equals
    - !Ref NodeAMIOS
    - SUSE-SLES-15-HVM
  DisableTargetGroups: !Equals
    - !Join [",", !Ref 'TargetGroupARNs' ]
    - ""
  IsSingleInstance: !Equals
    - !Ref NumberOfNodes
    - 1
  UseCustomAmi: !Not [ !Equals [ !Ref CustomAmiId, "" ] ]
  CleanupSGs: !Or
    - !Not [ !Equals [ !Ref CleanupSecurityGroupDependenciesLambdaArn, "" ] ]
    - !Equals [ !Ref 'ManagedNodeGroup', 'no' ]
  AutoScalerDisabled: !Equals [ !Ref 'ProvisionClusterAutoScaler', 'Disabled' ]
  DisableManagedNodeGroup: !Equals [ !Ref 'ManagedNodeGroup' , 'no' ]
  EnableManagedNodeGroup: !And
     - !Equals [ !Ref 'ManagedNodeGroup', 'yes' ]
     - !Condition AutoScalerDisabled
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  GreaterThan114: !Not
    - !Or
      - !Equals [ !Ref 'KubernetesVersion', '1.14' ]
      - !Equals [ !Ref 'KubernetesVersion', '1.13' ]
  MNGLBL: !Equals [ !Ref 'MangedNodeGroupLabel', '' ]
Mappings:
  K8sVersionMap:
    "1.13":
      BinaryPath: 1.13.8/2019-08-14/bin/linux/amd64
      STD: EKS113
      GPU: EKS113GPU
    "1.14":
      BinaryPath: 1.14.6/2019-08-22/bin/linux/amd64
      STD: EKS114
      GPU: EKS114GPU
    "1.15":
      BinaryPath: 1.15.10/2020-02-22/bin/linux/amd64
      STD: EKS115
      GPU: EKS115GPU
    "1.16":
      BinaryPath: 1.16.8/2020-04-16/bin/linux/amd64
      STD: EKS116
      GPU: EKS116GPU
  InstanceTypes:
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  OStoK8sVersionMap:
    Amazon-Linux-HVM:
      EKS113: AMZNEKS113
      EKS113GPU: AMZNEKS113GPU
      EKS114: AMZNEKS114
      EKS114GPU: AMZNEKS114GPU
      EKS115: AMZNEKS115
      EKS115GPU: AMZNEKS115GPU
      EKS116: AMZNEKS116
      EKS116GPU: AMZNEKS116GPU
    SUSE-SLES-15-HVM:
      EKS113: SLES15EKS113
      EKS113GPU: SLES15EKS113GPU
      EKS114: SLES15EKS114
      EKS114GPU: SLES15EKS114GPU
      EKS115: SLES15EKS115
      EKS115GPU: SLES15EKS115GPU
      EKS116: SLES15EKS116
      EKS116GPU: SLES15EKS116GPU
  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNEKS116: ami-0ca8e5c318b118092
      AMZNEKS116GPU: ami-073388a2ff3faa33b
      AMZNEKS115: ami-026e39e61d44ff507
      AMZNEKS115GPU: ami-093c945463034acd8
      AMZNEKS114: ami-0472f72a6affbe2cc
      AMZNEKS114GPU: ami-0665d37f861365592
      AMZNEKS113: ami-087463f05d2c49ed3
      AMZNEKS113GPU: ami-0b7f0991a89bd191c
      SLES15EKS115: ami-0dae5fda3ab8726c3
      SLES15EKS115GPU: ami-0dae5fda3ab8726c3
      SLES15EKS114: ami-0dae5fda3ab8726c3
      SLES15EKS114GPU: ami-0dae5fda3ab8726c3
      SLES15EKS113: ami-0dae5fda3ab8726c3
      SLES15EKS113GPU: ami-0dae5fda3ab8726c3
    ap-northeast-2:
      AMZNEKS116: ami-0da70348effa9af72
      AMZNEKS116GPU: ami-0be14db3e3d0a3802
      AMZNEKS115: ami-0e1e660d5e393d5f1
      AMZNEKS115GPU: ami-04ff3d7117b9946d5
      SLES15EKS115: ami-0bcca7befe1b4317b
      SLES15EKS115GPU: ami-0bcca7befe1b4317b
      AMZNEKS114: ami-01b6316fe22d918a9
      AMZNEKS114GPU: ami-04bd3e8bb22b81bd1
      AMZNEKS113: ami-092004fafd70c5e38
      AMZNEKS113GPU: ami-0065bbd4b85a840f4
      SLES15EKS114: ami-0bcca7befe1b4317b
      SLES15EKS114GPU: ami-0bcca7befe1b4317b
      SLES15EKS113: ami-0bcca7befe1b4317b
      SLES15EKS113GPU: ami-0bcca7befe1b4317b
    ap-south-1:
      AMZNEKS116: ami-00725375bc29d9601
      AMZNEKS116GPU: ami-031a4918f3db98a08
      AMZNEKS115: ami-040e5afd1b110a399
      AMZNEKS115GPU: ami-02b5340b229583722
      SLES15EKS115: ami-065edd4e2270fb2e1
      SLES15EKS115GPU: ami-065edd4e2270fb2e1
      AMZNEKS114: ami-09edbbb02478906e3
      AMZNEKS114GPU: ami-07f39289712b40bd2
      AMZNEKS113: ami-06ea3235f114e1cdb
      AMZNEKS113GPU: ami-0d5d61d6ae05d7e6b
      SLES15EKS114: ami-065edd4e2270fb2e1
      SLES15EKS114GPU: ami-065edd4e2270fb2e1
      SLES15EKS113: ami-065edd4e2270fb2e1
      SLES15EKS113GPU: ami-065edd4e2270fb2e1
    ap-southeast-1:
      AMZNEKS116: ami-093fffbd1480f8c72
      AMZNEKS116GPU: ami-0c34f543bfdbfdb04
      AMZNEKS115: ami-0d32de2029a9f56fd
      AMZNEKS115GPU: ami-0233b3e636baa0997
      SLES15EKS115: ami-0b7f7c934cfe30c63
      SLES15EKS115GPU: ami-0b7f7c934cfe30c63
      AMZNEKS114: ami-069fad55139bcb636
      AMZNEKS114GPU: ami-0d0c244ad46219038
      AMZNEKS113: ami-04d9ba03c38df08b5
      AMZNEKS113GPU: ami-033a9ce6a9c1c756f
      SLES15EKS114: ami-0b7f7c934cfe30c63
      SLES15EKS114GPU: ami-0b7f7c934cfe30c63
      SLES15EKS113: ami-0b7f7c934cfe30c63
      SLES15EKS113GPU: ami-0b7f7c934cfe30c63
    ap-southeast-2:
      AMZNEKS116: ami-0ed6c012b2bd57b73
      AMZNEKS116GPU: ami-0224f8b18262a4a1d
      AMZNEKS115: ami-07aee5ce871a45bcf
      AMZNEKS115GPU: ami-0f7aee17fdeffdbc0
      SLES15EKS115: ami-0d6f00758277a28f7
      SLES15EKS115GPU: ami-0d6f00758277a28f7
      AMZNEKS114: ami-0fbfeefbb99c1783d
      AMZNEKS114GPU: ami-04791e36cb138607e
      AMZNEKS113: ami-0bf9234bf8cd4eea2
      AMZNEKS113GPU: ami-07885a4b174760b28
      SLES15EKS114: ami-0d6f00758277a28f7
      SLES15EKS114GPU: ami-0d6f00758277a28f7
      SLES15EKS113: ami-0d6f00758277a28f7
      SLES15EKS113GPU: ami-0d6f00758277a28f7
    ca-central-1:
      AMZNEKS116: ami-0139a5bcca4fd37a9
      AMZNEKS116GPU: ami-0e3dd4ffe2990af89
      AMZNEKS115: ami-0286b3b75d600924d
      AMZNEKS115GPU: ami-0a1547fc818671add
      SLES15EKS115: ami-06ab9a53ab05446fa
      SLES15EKS115GPU: ami-06ab9a53ab05446fa
      AMZNEKS114: ami-064fd810d76e41b31
      AMZNEKS114GPU: ami-0c5dddc53103725e0
      AMZNEKS113: ami-01d73c6ce56880dd7
      AMZNEKS113GPU: ami-0b5721fda1a071339
      SLES15EKS114: ami-06ab9a53ab05446fa
      SLES15EKS114GPU: ami-06ab9a53ab05446fa
      SLES15EKS113: ami-06ab9a53ab05446fa
      SLES15EKS113GPU: ami-06ab9a53ab05446fa
    eu-central-1:
      AMZNEKS116: ami-0bf7306240d09dcdd
      AMZNEKS116GPU: ami-0341b089733b256f9
      AMZNEKS115: ami-02497bca9c9dbc206
      AMZNEKS115GPU: ami-05c4b8f3ef1bb1e19
      SLES15EKS115: ami-0c99be8a286251d31
      SLES15EKS115GPU: ami-0c99be8a286251d31
      AMZNEKS114: ami-03d9393d97f5959fe
      AMZNEKS114GPU: ami-0a0a41cca69ec0aae
      AMZNEKS113: ami-00b8b203722a43adf
      AMZNEKS113GPU: ami-0ac48ef9b47499768
      SLES15EKS114: ami-0c99be8a286251d31
      SLES15EKS114GPU: ami-0c99be8a286251d31
      SLES15EKS113: ami-0c99be8a286251d31
      SLES15EKS113GPU: ami-0c99be8a286251d31
    eu-north-1:
      AMZNEKS116: ami-030f9071e0d32b989
      AMZNEKS116GPU: ami-0928efc18a4fa6c75
      AMZNEKS115: ami-0efc0441f778f5826
      AMZNEKS115GPU: ami-03d6bc6745788f9dd
      SLES15EKS115: ami-0d4ba232167647a22
      SLES15EKS115GPU: ami-0d4ba232167647a22
      AMZNEKS114: ami-00aa667bc61a020ac
      AMZNEKS114GPU: ami-03a41b6e4558aa4c5
      AMZNEKS113: ami-01179dbad4d43b6a4
      AMZNEKS113GPU: ami-00e2aa5149bc6ac2f
      SLES15EKS114: ami-0d4ba232167647a22
      SLES15EKS114GPU: ami-0d4ba232167647a22
      SLES15EKS113: ami-0d4ba232167647a22
      SLES15EKS113GPU: ami-0d4ba232167647a22
    eu-west-1:
      AMZNEKS116: ami-03c5e686287fd90e9
      AMZNEKS116GPU: ami-0f3d4e5c54ec38176
      AMZNEKS115: ami-023736532608ff45e
      AMZNEKS115GPU: ami-07fdadd8f2bf06e82
      SLES15EKS115: ami-0c7c799aac480ea77
      SLES15EKS115GPU: ami-0c7c799aac480ea77
      AMZNEKS114: ami-048d37e92ce89022e
      AMZNEKS114GPU: ami-09585e5924cde339f
      AMZNEKS113: ami-0bd1d87604aa3a367
      AMZNEKS113GPU: ami-05432b1a64feb6423
      SLES15EKS114: ami-0c7c799aac480ea77
      SLES15EKS114GPU: ami-0c7c799aac480ea77
      SLES15EKS113: ami-0c7c799aac480ea77
      SLES15EKS113GPU: ami-0c7c799aac480ea77
    eu-west-2:
      AMZNEKS116: ami-02e571568d897dcab
      AMZNEKS116GPU: ami-0a4587c7e00661d8a
      AMZNEKS115: ami-0a79663bf395ae44d
      AMZNEKS115GPU: ami-089fe51b1c3b5d6fd
      SLES15EKS115: ami-01f3fa4b1427a8522
      SLES15EKS115GPU: ami-01f3fa4b1427a8522
      AMZNEKS114: ami-0a907f63b13a38029
      AMZNEKS114GPU: ami-0b155e164db9731e2
      AMZNEKS113: ami-0cfee0d573de9f673
      AMZNEKS113GPU: ami-0dc66e10b39d8ff36
      SLES15EKS114: ami-01f3fa4b1427a8522
      SLES15EKS114GPU: ami-01f3fa4b1427a8522
      SLES15EKS113: ami-01f3fa4b1427a8522
      SLES15EKS113GPU: ami-01f3fa4b1427a8522
    eu-west-3:
      AMZNEKS116: ami-0170bd57fa0c260da
      AMZNEKS116GPU: ami-0f18e42630a49eba4
      AMZNEKS115: ami-0de67e5d090c0eef0
      AMZNEKS115GPU: ami-0c84727799ef95690
      SLES15EKS115: ami-04451e7a9fa8ac139
      SLES15EKS115GPU: ami-04451e7a9fa8ac139
      AMZNEKS114: ami-043b0c38ebd8435f9
      AMZNEKS114GPU: ami-0473e8095f62eb9e0
      AMZNEKS113: ami-0f760dec69360c158
      AMZNEKS113GPU: ami-04981fe8fd1b08639
      SLES15EKS114: ami-04451e7a9fa8ac139
      SLES15EKS114GPU: ami-04451e7a9fa8ac139
      SLES15EKS113: ami-04451e7a9fa8ac139
      SLES15EKS113GPU: ami-04451e7a9fa8ac139
    sa-east-1:
      AMZNEKS116: ami-0ed2cc7e74c7bc2e2
      AMZNEKS116GPU: ami-0f32b9727b9868519
      AMZNEKS115: ami-07b176b7f55c9df7c
      AMZNEKS115GPU: ami-0c344fca61b2e56af
      SLES15EKS115: ami-0d760167d68cf77ba
      SLES15EKS115GPU: ami-0d760167d68cf77ba
      AMZNEKS114: ami-0fb60915ec12aac26
      AMZNEKS114GPU: ami-0828047d8af068874
      AMZNEKS113: ami-0f52e1602e8ed4e90
      AMZNEKS113GPU: ami-0e88ea382d951591c
      SLES15EKS114: ami-0d760167d68cf77ba
      SLES15EKS114GPU: ami-0d760167d68cf77ba
      SLES15EKS113: ami-0d760167d68cf77ba
      SLES15EKS113GPU: ami-0d760167d68cf77ba
    us-east-1:
      AMZNEKS116: ami-05ac566a7ec2378db
      AMZNEKS116GPU: ami-0a63304000a69ac83
      AMZNEKS115: ami-06d4f570358b1b626
      AMZNEKS115GPU: ami-08b20aa568bfd9034
      SLES15EKS115: ami-0b326695e023b93d5
      SLES15EKS115GPU: ami-0b326695e023b93d5
      AMZNEKS114: ami-05e621d4ba5b28dcc
      AMZNEKS114GPU: ami-04ac5ea8ad53f0718
      AMZNEKS113: ami-08becd0d34f995483
      AMZNEKS113GPU: ami-0487c755adba013ba
      SLES15EKS114: ami-0b326695e023b93d5
      SLES15EKS114GPU: ami-0b326695e023b93d5
      SLES15EKS113: ami-0b326695e023b93d5
      SLES15EKS113GPU: ami-0b326695e023b93d5
    us-east-2:
      AMZNEKS116: ami-0edc51bc2f03c9dc2
      AMZNEKS116GPU: ami-0de82d6127e72c65b
      AMZNEKS115: ami-0c1bd9eca9c869a0d
      AMZNEKS115GPU: ami-09fff3605c34de565
      SLES15EKS115: ami-0efc9a15a1fd61f97
      SLES15EKS115GPU: ami-0efc9a15a1fd61f97
      AMZNEKS114: ami-0b89776dcfa5f2dee
      AMZNEKS114GPU: ami-0575560bf57d243b6
      AMZNEKS113: ami-0cf9a8c09f13b04d1
      AMZNEKS113GPU: ami-0d30b440fa882e95b
      SLES15EKS114: ami-0efc9a15a1fd61f97
      SLES15EKS114GPU: ami-0efc9a15a1fd61f97
      SLES15EKS113: ami-0efc9a15a1fd61f97
      SLES15EKS113GPU: ami-0efc9a15a1fd61f97
    us-west-2:
      AMZNEKS116: ami-0809659d79ce80260
      AMZNEKS116GPU: ami-069280744807e927b
      AMZNEKS115: ami-065418523a44331e5
      AMZNEKS115GPU: ami-0b408465e05e85edb
      SLES15EKS115: ami-0ccefbfd6cd77b0a2
      SLES15EKS115GPU: ami-0ccefbfd6cd77b0a2
      AMZNEKS114: ami-0486134a23d903f10
      AMZNEKS114GPU: ami-02b0649372044be55
      AMZNEKS113: ami-0c42eb6db4a35a419
      AMZNEKS113GPU: ami-0cfb505d6cdd3fc67
      SLES15EKS114: ami-0ccefbfd6cd77b0a2
      SLES15EKS114GPU: ami-0ccefbfd6cd77b0a2
      SLES15EKS113: ami-0ccefbfd6cd77b0a2
      SLES15EKS113GPU: ami-0ccefbfd6cd77b0a2
    me-south-1:
      AMZNEKS116: ami-08bf7870510670f47
      AMZNEKS116GPU: ami-0452551cc7dc1ad8f
      AMZNEKS115: ami-075a74dc065b91bf6
      AMZNEKS115GPU: ami-0d8935022e83627fc
      SLES15EKS115: ami-08ab47783ca7d9bab
      SLES15EKS115GPU: ami-08ab47783ca7d9bab
      AMZNEKS114: ami-0e337e92214d0764d
      AMZNEKS114GPU: ami-05d6823cc5b7dc141
      AMZNEKS113: ami-0f8a8ca99021bd9c4
      AMZNEKS113GPU: ami-0b25c61c3a7906981
      SLES15EKS114: ami-08ab47783ca7d9bab
      SLES15EKS114GPU: ami-08ab47783ca7d9bab
      SLES15EKS113: ami-08ab47783ca7d9bab
      SLES15EKS113GPU: ami-08ab47783ca7d9bab
    ap-east-1:
      AMZNEKS116: ami-024ec7439d902ac50
      AMZNEKS116GPU: ami-0e9e0529e8f7739b2
      AMZNEKS115: ami-0ae1b0aad4d6fb508
      AMZNEKS115GPU: ami-0cebc923a92e816dc
      SLES15EKS115: ami-0ba53281cb40c2c23
      SLES15EKS115GPU: ami-0ba53281cb40c2c23
      AMZNEKS114: ami-03d6ba9854832e1af
      AMZNEKS114GPU: ami-0d02219ac9e17b2a8
      AMZNEKS113: ami-04d4f9509e32a49e5
      AMZNEKS113GPU: ami-06203aa73a3468d51
      SLES15EKS114: ami-0ba53281cb40c2c23
      SLES15EKS114GPU: ami-0ba53281cb40c2c23
      SLES15EKS113: ami-0ba53281cb40c2c23
      SLES15EKS113GPU: ami-0ba53281cb40c2c23
    cn-north-1:
      AMZNEKS116: ami-07108f3aaa373301b
      AMZNEKS116GPU: ami-0616c69cba05e4cf8
      AMZNEKS115: ami-0328eb163bdc23b56
      AMZNEKS115GPU: ami-08080f72f7d9e59d7
      SLES15EKS115: ami-065f90c5b77bb1f4a
      SLES15EKS115GPU: ami-065f90c5b77bb1f4a
      AMZNEKS114: ami-0ace35e8d17b684e4
      AMZNEKS114GPU: ami-04e5ae18d4aad7477
      AMZNEKS113: ami-09a40634f24e6eb15
      AMZNEKS113GPU: ami-0b066122a54318501
      SLES15EKS114: ami-065f90c5b77bb1f4a
      SLES15EKS114GPU: ami-065f90c5b77bb1f4a
      SLES15EKS113: ami-065f90c5b77bb1f4a
      SLES15EKS113GPU: ami-065f90c5b77bb1f4a
    cn-northwest-1:
      AMZNEKS116: ami-00e5a9f05190a870f
      AMZNEKS116GPU: ami-059159c315686466d
      AMZNEKS115: ami-096648a8ff0856690
      AMZNEKS115GPU: ami-01884d55778898aaf
      SLES15EKS115: ami-036d95c22c0c6df0f
      SLES15EKS115GPU: ami-036d95c22c0c6df0f
      AMZNEKS114: ami-06a25a7a8169db58e
      AMZNEKS114GPU: ami-09bf7bf625321a193
      AMZNEKS113: ami-0206530c1b3913bf0
      AMZNEKS113GPU: ami-02f54a8f9d951af65
      SLES15EKS114: ami-036d95c22c0c6df0f
      SLES15EKS114GPU: ami-036d95c22c0c6df0f
      SLES15EKS113: ami-036d95c22c0c6df0f
      SLES15EKS113GPU: ami-036d95c22c0c6df0f
Resources:
  CleanupSecurityGroupDependencies:
    Condition: CleanupSGs
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !Ref CleanupSecurityGroupDependenciesLambdaArn
      SecurityGroups:
        - !If
          - DisableManagedNodeGroup
          - !Ref NodeSecurityGroup
          - !Ref 'AWS::NoValue'
  NodeSecurityGroup:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the node group
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EKSControlPlane}"
          Value: 'owned'
  NodeSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  ManagedNodeSecurityGroupIngress:
    Metadata:
      cfn-lint: { config: { ignore_checks: [E3008] } }
    Condition: EnableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSG
      SourceSecurityGroupId: !Ref NodeSG
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ClusterControlPlaneSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  NodeSG:
    Condition: EnableManagedNodeGroup
    Type: Custom::NodeSG
    Properties:
      ServiceToken: !Ref NodeSGFunctionArn
      ClusterName: !Ref EKSControlPlane
      NodeGroupName: !GetAtt EKSNodegroup.NodegroupName
  NodeGroup:
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
      DependsOn2: !If [ EnableProxy, !Ref ConfigureProxy, !Ref "AWS::NoValue" ]
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumberOfNodes
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NumberOfNodes
      MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      VPCZoneIdentifier: !If
        - 3AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
        - !If
          - 2AZDeployment
          - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
          - [ !Ref PrivateSubnet1ID ]
      TargetGroupARNs: !If [ DisableTargetGroups, !Ref "AWS::NoValue", !Ref TargetGroupARNs ]
      Tags:
        - Key: Name
          Value: !Sub "${EKSControlPlane}-${NodeGroupName}-Node"
          PropagateAtLaunch: true
        - Key: !Sub 'kubernetes.io/cluster/${EKSControlPlane}'
          Value: 'owned'
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: 'true'
          PropagateAtLaunch: true
        - Key: !Sub 'k8s.io/cluster-autoscaler/${EKSControlPlane}'
          Value: ''
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumberOfNodes
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !If [IsSingleInstance, 0, 1]
        MaxBatchSize: 1
        WaitOnResourceSignals : true
        PauseTime: PT15M
  ConfigureProxy:
    Condition: EnableProxy
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      HttpProxy: !Ref HttpProxy
      VpcId: !Ref VPCID
  NodeLaunchConfig:
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          roleName: !Ref NodeInstanceRoleName
          type: S3
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/worker/bootstrap.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/bootstrap.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/docker-daemon.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/docker-daemon.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/eni-max-pods.txt:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/eni-max-pods.txt'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/install-worker.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/install-worker.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000755'
              authentication: S3Auth
            /tmp/worker/kubelet-config.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-config.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet-kubeconfig:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-kubeconfig'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet.service:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet.service${Version}'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                  Version: !If [GreaterThan114, ".1.15", ""]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/logrotate-kube-proxy:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/logrotate-kube-proxy'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
          commands:
            a-install:
              command: /tmp/worker/install-worker.sh
              env:
                BINARY_BUCKET_NAME: amazon-eks
                BINARY_BUCKET_PATH: !FindInMap
                  - K8sVersionMap
                  - !Ref KubernetesVersion
                  - BinaryPath
                BINARY_BUCKET_REGION: us-west-2
            b-bootstrap:
              command: !Sub /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments}
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !If
        - UseCustomAmi
        - !Ref CustomAmiId
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - !FindInMap
            - OStoK8sVersionMap
            - !Ref NodeAMIOS
            - !FindInMap
              - K8sVersionMap
              - !Ref KubernetesVersion
              - !FindInMap
                - InstanceTypes
                - !Ref NodeInstanceType
                - Type
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: !If [ SuseOS, /dev/sda1, /dev/xvda ]
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            set -o xtrace
            function signal() {
              $1/cfn-signal --exit-code $2 \
                --stack  ${AWS::StackName} \
                --resource NodeGroup  \
                --region ${AWS::Region}
            }
            ${ProxySetup}
            ${BootStrap}
            ${ProxyPostSetup}
            ${Signal}
          - ProxySetup: !If
              - EnableProxy
              - !Sub |
                  MAC=$(curl -s http://169.254.169.254/latest/meta-data/mac/)
                  VPCCIDR=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-blocks | xargs | tr ' ' ',')
                  cat <<EOF >> /etc/environment
                  HTTP_PROXY=${HttpProxy}
                  HTTPS_PROXY=${HttpProxy}
                  http_proxy=${HttpProxy}
                  https_proxy=${HttpProxy}
                  no_proxy=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  NO_PROXY=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  EOF
                  set -a
                  source /etc/environment
              - ""
            ProxyPostSetup: !If
              - EnableProxy
              - |
                  mkdir -p /etc/systemd/system/docker.service.d
                  cat <<EOF >> /etc/systemd/system/docker.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  cat <<EOF >> /etc/systemd/system/kubelet.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  systemctl daemon-reload
                  systemctl enable --now --no-block docker
                  systemctl restart docker
                  systemctl restart kubelet
              - ""
            Signal: !If
              - AmznOS
              - |
                  signal /opt/aws/bin $?
              - |
                  signal /usr/bin $?
                  if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                    # Need to enable some kernel boot options and reboot
                    sed -i 's|GRUB_CMDLINE_LINUX=""|GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1" |' /etc/default/grub
                    grub2-mkconfig -o /boot/grub2/grub.cfg
                    reboot
                  fi
            BootStrap: !If
            - AmznOS
            - !Sub |
                /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments} || signal /opt/aws/bin $1
            - !Sub |
                if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                  zypper in -y python2-setuptools
                  update-alternatives --set easy_install /usr/bin/easy_install-2.7
                fi
                easy_install https://cloudformation-examples.s3.amazonaws.com/aws-cfn-bootstrap-latest.zip
                /usr/bin/cfn-init \
                  --stack ${AWS::StackName} \
                  --resource NodeLaunchConfig \
                  --region ${AWS::Region}
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
    Condition: EnableManagedNodeGroup
    Properties:
      ClusterName: !Ref EKSControlPlane
      NodeRole: !Ref NodeInstanceRoleArn
      AmiType: !If [ EnableManagedNodeGroup, !Ref 'ManagedNodeGroupAMIType', !Ref "AWS::NoValue" ]
      InstanceTypes:
        - !Ref 'NodeInstanceType'
      DiskSize: !Ref NodeVolumeSize
      ScalingConfig:
        MinSize: !Ref NumberOfNodes
        DesiredSize: !Ref NumberOfNodes
        MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      Labels:
        Key: Name
        Value: !If [ MNGLBL, !Sub '${EKSControlPlane}-${NodeGroupName}-Node', !Ref MangedNodeGroupLabel ]
        PropagateAtLaunch: true
      Subnets: !If
      - 3AZDeployment
      - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
      - !If
        - 2AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
        - [ !Ref PrivateSubnet1ID ]
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
Outputs:
  EKSNodeSecurityGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref NodeSecurityGroup
      - !If [ EnableManagedNodeGroup, !Ref NodeSG, "" ]
  NodeAutoScalingGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref 'NodeGroup'
      - !If [ EnableManagedNodeGroup, !Ref 'EKSNodegroup', "" ]